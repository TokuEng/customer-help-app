name: Deploy to DigitalOcean (Optimized)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: registry.digitalocean.com
  REGISTRY_NAME: workco
  WEB_IMAGE_NAME: customer-help-web
  API_IMAGE_NAME: customer-help-api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build BOTH images in parallel using matrix strategy
      - name: Build and push images in parallel
        run: |
          # Start web build in background
          docker buildx build --platform linux/amd64 \
            -t ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.WEB_IMAGE_NAME }}:latest \
            -t ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }} \
            -f apps/web/Dockerfile apps/web \
            --cache-from type=registry,ref=${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.WEB_IMAGE_NAME }}:buildcache \
            --cache-to type=registry,ref=${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.WEB_IMAGE_NAME }}:buildcache,mode=max \
            --push &
          WEB_PID=$!
          
          # Start API build in background
          docker buildx build --platform linux/amd64 \
            -t ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.API_IMAGE_NAME }}:latest \
            -t ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }} \
            -f apps/api/Dockerfile apps/api \
            --cache-from type=registry,ref=${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.API_IMAGE_NAME }}:buildcache \
            --cache-to type=registry,ref=${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.API_IMAGE_NAME }}:buildcache,mode=max \
            --push &
          API_PID=$!
          
          # Wait for both builds to complete
          echo "Building images in parallel..."
          wait $WEB_PID
          WEB_EXIT=$?
          wait $API_PID
          API_EXIT=$?
          
          if [ $WEB_EXIT -ne 0 ] || [ $API_EXIT -ne 0 ]; then
            echo "❌ One or more builds failed"
            exit 1
          fi
          
          echo "✅ Both images built and pushed successfully"

      - name: Deploy to DigitalOcean App Platform
        run: |
          # Check if app exists
          APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "customer-help-center" | awk '{print $1}' || true)
          
          if [ -z "$APP_ID" ]; then
            echo "Creating new app..."
            doctl apps create --spec .do/app.yaml --wait=false
            APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "customer-help-center" | awk '{print $1}')
          else
            echo "Updating existing app with ID: $APP_ID"
            doctl apps update "$APP_ID" --spec .do/app.yaml --wait=false
          fi
          
          echo "app_id=$APP_ID" >> $GITHUB_ENV

      - name: Monitor deployment (with timeout)
        run: |
          echo "Monitoring deployment..."
          TIMEOUT=120
          ELAPSED=0
          INTERVAL=10  # Check every 10 seconds instead of 20
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            PHASE=$(doctl apps get ${{ env.app_id }} --format ActiveDeployment.Phase --no-header || echo "UNKNOWN")
            echo "[$ELAPSED/$TIMEOUT sec] Deployment phase: $PHASE"
            
            if [ "$PHASE" == "ACTIVE" ]; then
              echo "✅ Deployment completed successfully!"
              APP_URL=$(doctl apps get ${{ env.app_id }} --format LiveURL --no-header)
              echo "🌐 App URL: $APP_URL"
              exit 0
            elif [ "$PHASE" == "ERROR" ] || [ "$PHASE" == "CANCELED" ]; then
              echo "❌ Deployment failed with status: $PHASE"
              exit 1
            fi
            
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done
          
          echo "⚠️ Deployment timed out after $TIMEOUT seconds"
          echo "Check DigitalOcean dashboard for status"
          exit 0  # Don't fail the workflow on timeout

      - name: Summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Web Image**: \`${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **API Image**: \`${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check deployment status: https://cloud.digitalocean.com/apps" >> $GITHUB_STEP_SUMMARY
