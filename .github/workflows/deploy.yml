name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: registry.digitalocean.com
  REGISTRY_NAME: workco
  WEB_IMAGE_NAME: customer-help-web
  API_IMAGE_NAME: customer-help-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: apps/web
          file: apps/web/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.WEB_IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.WEB_IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.WEB_IMAGE_NAME }}:buildcache,mode=max

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: apps/api
          file: apps/api/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.API_IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.API_IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.API_IMAGE_NAME }}:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Get App ID
        id: get-app-id
        run: |
          APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "customer-help-center" | awk '{print $1}')
          if [ -z "$APP_ID" ]; then
            echo "App not found, will create new app"
            echo "app_exists=false" >> $GITHUB_OUTPUT
          else
            echo "Found app ID: $APP_ID"
            echo "app_id=$APP_ID" >> $GITHUB_OUTPUT
            echo "app_exists=true" >> $GITHUB_OUTPUT
          fi

      - name: Update environment variables in app spec
        run: |
          # Create a temporary app spec with environment variables from secrets
          cp .do/app.yaml .do/app-deploy.yaml
          
          # Replace secret placeholders if needed
          # Note: The secrets in the app.yaml should already be configured
          # This step is here if you need to inject additional runtime values

      - name: Create new app (if doesn't exist)
        if: steps.get-app-id.outputs.app_exists == 'false'
        run: |
          doctl apps create --spec .do/app.yaml --wait

      - name: Update existing app
        if: steps.get-app-id.outputs.app_exists == 'true'
        run: |
          doctl apps update ${{ steps.get-app-id.outputs.app_id }} --spec .do/app.yaml --wait

      - name: Get app URL
        id: get-app-url
        run: |
          if [ "${{ steps.get-app-id.outputs.app_exists }}" == "false" ]; then
            # For new app, get the ID first
            APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "customer-help-center" | awk '{print $1}')
          else
            APP_ID="${{ steps.get-app-id.outputs.app_id }}"
          fi
          
          APP_URL=$(doctl apps get $APP_ID --format LiveURL --no-header)
          echo "App URL: $APP_URL"
          echo "app_url=$APP_URL" >> $GITHUB_OUTPUT

      - name: Wait for deployment to complete
        run: |
          if [ "${{ steps.get-app-id.outputs.app_exists }}" == "false" ]; then
            APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "customer-help-center" | awk '{print $1}')
          else
            APP_ID="${{ steps.get-app-id.outputs.app_id }}"
          fi
          
          echo "Waiting for deployment to complete..."
          for i in {1..30}; do
            PHASE=$(doctl apps get $APP_ID --format ActiveDeployment.Phase --no-header)
            echo "Deployment phase: $PHASE"
            if [ "$PHASE" == "ACTIVE" ]; then
              echo "✅ Deployment completed successfully!"
              break
            elif [ "$PHASE" == "ERROR" ] || [ "$PHASE" == "CANCELED" ]; then
              echo "❌ Deployment failed with status: $PHASE"
              exit 1
            fi
            sleep 20
          done

      - name: Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **App URL**: ${{ steps.get-app-url.outputs.app_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Web Image**: \`${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **API Image**: \`${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
